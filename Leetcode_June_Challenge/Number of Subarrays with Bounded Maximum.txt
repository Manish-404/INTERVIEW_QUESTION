Number of Subarrays with Bounded Maximum:-

We are given an array nums of positive integers, and two positive integers left and right (left <= right).
Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least left and at most right.

Example:
Input: 
nums = [2, 1, 4, 3]
left = 2
right = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
_______________________________________________________________________________________________________________________________________________________
class Solution {
    public int numSubarrayBoundedMax(int[] A, int left, int right) {
        int j=0, count=0, res=0;
        
        for(int i=0; i<A.length; i++){
            //First case: legal element
            if(A[i] >= left && A[i] <= right){
                count = i-j+1;
                res += count;
            }
            //Second case: element is smaller than lower bound
            else if(A[i] < left){
                res += count;
            }
            //Third case: element is bigger than upper bound
            else{
                j=i+1;
                count=0;
            }
        }
        return res;
    }
}