Range Sum Query - Mutable:-

Given an integer array nums, handle multiple queries of the following types:

Update the value of an element in nums.
Calculate the sum of the elements of nums between indices left and right inclusive where left <= right.
Implement the NumArray class:

NumArray(int[] nums) Initializes the object with the integer array nums.
void update(int index, int val) Updates the value of nums[index] to be val.
int sumRange(int left, int right) Returns the sum of the elements of nums between indices left and right inclusive (i.e. nums[left] + nums[left + 1] + ... + nums[right]).

Example 1:
Input
["NumArray", "sumRange", "update", "sumRange"]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]

Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9
numArray.update(1, 2);   // nums = [1, 2, 5]
numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8
_____________________________________________________________________________________________________________________________________________
class NumArray {
    class TreeNode{
        int sum;
        int start, end;
        TreeNode left, right;
        public TreeNode(int s, int e){
            start=s;
            end=e;
            left=null;
            right=null;
        }
    }
    TreeNode root=null;
    private TreeNode buildTree(int[] nums, int start, int end){
        if(start > end) return null;
        TreeNode res=new TreeNode(start, end);
        if(start == end){
            res.sum =nums[start];
        }else{
            int mid=start+(end-start)/2;
            res.left=buildTree(nums, start, mid);
            res.right=buildTree(nums, mid+1, end);
            res.sum=res.left.sum+res.right.sum;
            
        }
        return res;
    }
    public NumArray(int[] nums) {
        root=buildTree(nums, 0, nums.length-1);
    }
    
    private void update(TreeNode root, int i, int val){
        if(root.start==root.end){
            root.sum=val;
        }else{
            int mid=root.start+(root.end - root.start)/2;
            if(i <= mid){
                update(root.left, i, val);
            }else{
                update(root.right, i, val);
            }
            root.sum = root.left.sum + root.right.sum;
        }
    }
    public void update(int i, int val) {
        update(root, i,val);
    }
    
    private int query(TreeNode root, int i, int j){
        if(root.start == i && root.end == j){
            return root.sum;
        }else{
            int mid=root.start + (root.end-root.start)/2;
            if(j <= mid){
                return query(root.left, i, j);
            }else if(i >= mid+1){
                return query(root.right, i, j);
            }else{
                return query(root.left, i, mid)+query(root.right, mid+1, j);
            }
        }
    }
    public int sumRange(int i, int j) {
        return query(root, i, j);
    }
}



/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(index,val);
 * int param_2 = obj.sumRange(left,right);
 */


/*
class NumArray {

    int[] a ;
    int s = 0;
    public NumArray(int[] nums) {
       a = nums;
       for(int i = 0; i < nums.length; i++)
            s += nums[i];        
    }
    
    public void update(int index, int val) {
        
        s -= a[index];
        s += val;
        a[index] = val;
        //System.out.println(s);
    }
    
    public int sumRange(int left, int right) {
        int s1 = s;
        if(left == right){
            s1 = a[left];
        }
        else {
        if(left > 0){
          for(int i = 0; i < left; i++){
              s1 -= a[i];
          }  
        }
        if( a.length > 2 && right <= a.length - 2){
        for(int i = right + 1; i < a.length; i++)
            s1 -= a[i];
        } 
        }
        return s1;
    }
}
*/