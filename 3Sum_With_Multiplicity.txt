3Sum With Multiplicity:-

Given an integer array arr, and an integer target, return the number of tuples i, j, k such that i < j < k and 
arr[i] + arr[j] + arr[k] == target.
As the answer can be very large, return it modulo 109 + 7.

Example 1:-
Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8
Output: 20
Explanation: 
Enumerating by the values (arr[i], arr[j], arr[k]):
(1, 2, 5) occurs 8 times;
(1, 3, 4) occurs 8 times;
(2, 2, 4) occurs 2 times;
(2, 3, 3) occurs 2 times.

Example 2:-
Input: arr = [1,1,2,2,2,2], target = 5
Output: 12
Explanation: 
arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:
We choose one 1 from [1,1] in 2 ways,
and two 2s from [2,2,2,2] in 6 ways.
______________________________________________________________________

class Solution {
    public int threeSumMulti(int[] arr, int target) {
        Map<Integer, Long> freqMap = new HashMap<>();
        for(int el: arr){
            long freq = freqMap.getOrDefault(el, 0l);
            freqMap.put(el, freq+1l);
        }
        
        long ans = 0;
        for(Integer el1: freqMap.keySet())  {
            for (Integer el2: freqMap.keySet()) {
                int el3 = target - el1 - el2;
                if(freqMap.containsKey(el3)) {
                    long freq1 = freqMap.get(el1);
                    long freq2 = freqMap.get(el2);
                    long freq3 = freqMap.get(el3);
                    
                    if(el1 == el2 && el1 == el3) {
                        ans += ((freq1) * (freq1 - 1)*(freq1 - 2)) / 6;
                    }else if(el1 == el2 && el1!=el3){
                        ans += ((freq1)*(freq1-1))/2*freq3;
                    }else if(el1 < el2 && el2 < el3) {
                        ans += (freq1*freq2*freq3);
                    }
                }
                ans = ans % 1000000007;
            }
        }
        return (int)ans;
    }
}