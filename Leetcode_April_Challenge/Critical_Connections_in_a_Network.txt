Critical Connections in a Network:-

There are n servers numbered from 0 to n-1 connected by undirected server-to-server connections forming a network where connections[i] = [a, b] 
represents a connection between servers a and b. Any server can reach any other server directly or indirectly through the network.
A critical connection is a connection that, if removed, will make some server unable to reach some other server.
Return all critical connections in the network in any order.

Example 1:

Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.
__________________________________________________________________________________________________________________________________
class Solution {
    int time=0;
    List<List<Integer>> result;
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        List<Integer>[] adj = new ArrayList[n];
        //Arrays.fill(adj, new ArrayList<>());
        for(int i=0; i<n; i++) adj[i] = new ArrayList<>();
        
        for(List<Integer> edge:connections){
            int a = edge.get(0);
            int b = edge.get(1);
            
            adj[a].add(b);
            adj[b].add(a);
        }  
        boolean[] visited = new boolean[n];
        int[] timestamp = new int[n];
        result = new ArrayList<>();
        dfs(adj, visited, timestamp, 0, -1);
        return result;
    }
    
    void dfs(List<Integer>[] adj, boolean[] visited, int[] timestamp, int vertex, int prev)
    {
        visited[vertex] = true;
        timestamp[vertex] = time++;
        int currentTimeStamp = timestamp[vertex];

        for(int v: adj[vertex]){
            if(v == prev) continue;

            if(!visited[v]) dfs(adj,visited,timestamp, v, vertex);

            timestamp[vertex] = Math.min(timestamp[vertex], timestamp[v]);
            if(currentTimeStamp < timestamp[v]) result.add(Arrays.asList(vertex,v));
        }
    }
}

//TC: O(n)
//SC: O(n)