Ones and Zeroes:-

You are given an array of binary strings strs and two integers m and n.
Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.
A set x is a subset of a set y if all elements of x are also elements of y.

Example 1:
Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
{"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.

Example 2:
Input: strs = ["10","0","1"], m = 1, n = 1
Output: 2
Explanation: The largest subset is {"0", "1"}, so the answer is 2.
________________________________________________________________________________________________________________________
//used recursion and memorization to build dp array
class Solution {
    int[][][] dp = null;
    public int findMaxForm(String[] strs, int m, int n) {
        
        dp = new int[m+1][n+1][strs.length];
        
        int[][] strFreq = new int[strs.length][2];
        int i = 0;
        for(String str : strs){
            strFreq[i] = freqCount(str);
            i++;
        }
        return helper(strs, m, n, 0, strFreq);
    }
    
    private int helper(String[] strs, int m, int n, int index, int[][] strFreq){
        if(index >= strs.length || (m+n) <= 0){
            return 0;
        }
        if(dp[m][n][index] > 0){
            return dp[m][n][index];
        }
        
        int countElIfCurrInc = 0;
        int countElIfCurrExc = 0;
        int zeroFreq = strFreq[index][0];
        int oneFreq = strFreq[index][1];
        
        if(m >= zeroFreq && n >= oneFreq){
            countElIfCurrInc = 1+ helper(strs, m-zeroFreq, n-oneFreq, index+1, strFreq);
        }
        countElIfCurrExc = helper(strs, m, n, index+1, strFreq);
        dp[m][n][index] = Math.max(countElIfCurrInc, countElIfCurrExc);
        return dp[m][n][index];
    }
    
    private int[] freqCount(String str){
        int[] freq = new int[2];
        for(char a: str.toCharArray()){
            if(a=='0'){
                freq[0]++;
            }else{
                freq[1]++;
            }
        }
        return freq;
    }
}