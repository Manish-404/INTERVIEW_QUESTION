Find and Replace Pattern:-

Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.
A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.
Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.

Example 1:
Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.

Example 2:
Input: words = ["a","b","c"], pattern = "a"
Output: ["a","b","c"]
_________________________________________________________________________________________________________________________________________
class Solution {
    public List<String> findAndReplacePattern(String[] words, String pattern) {
        List<String> result = new ArrayList<>();
        
        for(String word: words){
            if(matches(word,pattern)){
                result.add(word);
            }
        }
        
        return result;
    }
    private boolean matches(String word,String pattern){
        char[] patternToWord = new char[26];
        char[] wordToPattern = new char[26];
        
        for(int index=0; index<word.length(); index++){
            char wordChar = word.charAt(index);
            char patternChar = pattern.charAt(index);
            
            if(patternToWord[patternChar-'a']==0){
                patternToWord[patternChar-'a']=wordChar;
            }
            if(wordToPattern[wordChar-'a']==0){
                wordToPattern[wordChar-'a']=patternChar;
            }
            if(patternToWord[patternChar-'a'] != wordChar || wordToPattern[wordChar-'a'] != patternChar){
                return false;
            }
        }
        return true;
    }
}

//TC: O(N*k)
//SC: O(N*k)
