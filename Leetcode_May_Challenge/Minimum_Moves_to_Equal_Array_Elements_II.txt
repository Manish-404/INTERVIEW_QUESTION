Minimum Moves to Equal Array Elements II:-

Given an integer array nums of size n, return the minimum number of moves required to make all array elements equal.
In one move, you can increment or decrement an element of the array by 1.

Example 1:
Input: nums = [1,2,3]
Output: 2
Explanation:
Only two moves are needed (remember each move increments or decrements one element):
[1,2,3]  =>  [2,2,3]  =>  [2,2,2]

Example 2:
Input: nums = [1,10,2,9]
Output: 16
___________________________________________________________________________________________________________________________________________
// class Solution {
//     public int minMoves2(int[] nums) {
//         int n=nums.length;
//         //Sort the array
//         Arrays.sort(nums);  //NlogN
        
//         //find the median
//         int median = n%2==0 ? (nums[n/2]+nums[n/2-1])/2 : nums[n/2];
//         int steps = 0;
        
//         //calculate the steps
//         for(int num : nums){
//             steps += Math.abs(num-median);
//         }
//         return steps;
//     }
// }

//TC: O(NlogN)
//SC: O(1)

class Solution {
    public int minMoves2(int[] nums) {
        //sort the array
        Arrays.sort(nums);
        
        //calculate the steps by taking two pointers
        int i=0, j=nums.length-1;
        int steps = 0;
        while(i<j){
            steps += (nums[j]-nums[i]);
            i++;
            j--;
        }
        return steps;
    }
}

//TC: O(NlogN)
//SC: O(1)