Longest String Chain:-

Given a list of words, each word consists of English lowercase letters.
Let's say word1 is a predecessor of word2 if and only if we can add exactly one letter anywhere in word1 to make it equal to word2. For example, 
"abc" is a predecessor of "abac".
A word chain is a sequence of words [word_1, word_2, ..., word_k] with k >= 1, where word_1 is a predecessor of word_2, word_2 is a predecessor of word_3, and so on.
Return the longest possible length of a word chain with words chosen from the given list of words.

Example 1:
Input: words = ["a","b","ba","bca","bda","bdca"]
Output: 4
Explanation: One of the longest word chain is "a","ba","bda","bdca".

Example 2:
Input: words = ["xbc","pcxbcf","xb","cxbc","pcxbc"]
Output: 5
__________________________________________________________________________________________________________________________________________________
class Solution {
    public int longestStrChain(String[] words) {
        //sort on length
        Arrays.sort(words, (a,b) -> a.length()-b.length());
        int res=0;
        Map<String, Integer> memo = new HashMap<>();
        
        //Iterate on the words
        //Time Complexity: N * Length * Length
        for(String word:words){
            //put current word in map with default value.
            memo.put(word, 1);
            //Time: Length * Length
            for(int i=0; i<word.length(); i++){
                StringBuilder current = new StringBuilder(word);
                String next = current.deleteCharAt(i).toString(); //Time: Length
                //check if the value for next is alread calcuated
                if(memo.containsKey(next)){
                    //update the value in thhe map with the maximum possible value
                    memo.put(word, Math.max(memo.get(word), memo.get(next)+1));
                }
            }
            res = Math.max(res, memo.get(word));
        }
        return res;
    }
}

//TC: NlogN + N*L*L
//SC: O(NL) or O(N)