Super Palindromes:-

Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.
Given two positive integers left and right represented as strings, return the number of super-palindromes integers in the inclusive range [left, right].

Example 1:
Input: left = "4", right = "1000"
Output: 4
Explanation: 4, 9, 121, and 484 are superpalindromes.
Note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.

Example 2:
Input: left = "1", right = "2"
Output: 1
_________________________________________________________________________________________________________________________________________________
class Solution {
    public int superpalindromesInRange(String left, String right) {
        long l = Long.valueOf(left);
        long r = Long.valueOf(right);
        int count = 0;
        
        //Create the palindrome
        //Even Palindromes
        for(int i=1; i<100000; i++){
            StringBuilder sb = new StringBuilder(Integer.toString(i));
            for(int j=sb.length()-1; j>=0; j--){
                sb.append(sb.charAt(j));
            }
            //Palindrome in sb
            long n=Long.valueOf(sb.toString());
            n*=n;
            //check if n is a Super palindrome-->find whether it is palindrome
            if(n>r) break;
            else if(n>=l && isPalindrome(n)) count++;
        }
        //Odd Palindromes
        for(int i=1; i<100000; i++){
            StringBuilder sb = new StringBuilder(Integer.toString(i));
            for(int j=sb.length()-2; j>=0; j--){
                sb.append(sb.charAt(j));
            }
            //Palindrome in sb
            long n=Long.valueOf(sb.toString());
            n*=n;
            //check if n is a Super palindrome-->find whether it is palindrome
            if(n>r) break;
            else if(n>=l && isPalindrome(n)) count++;
        }
        return count;
    }
    
    public boolean isPalindrome(long n){
        return n == reverse(n);
    }
    
    public long reverse(long n){
        long rev=0;
        while(n>0){
            rev = rev*10 + n%10;
            n/=10;
        }
        return rev;
    }
}