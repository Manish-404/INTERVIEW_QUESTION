Max Sum of Rectangle No Larger Than K:-

Given an m x n matrix matrix and an integer k, return the max sum of a rectangle in the matrix such that its sum is no larger than k.
It is guaranteed that there will be a rectangle with a sum no larger than k.

Example 1:
Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2
Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).

Example 2:
Input: matrix = [[2,2,-1]], k = 3
Output: 3
_________________________________________________________________________________________________________________________________________________________
class Solution {
    public int maxSumSubmatrix(int[][] matrix, int k) {
        int row = matrix.length;
        int col = matrix[0].length;
        int max = Integer.MIN_VALUE;
        for(int i=0; i<row; i++){
            int[] colSum = new int[col];
            for(int j=i; j<row; j++){
                for(int c=0; c<col; c++){
                    colSum[c] += matrix[j][c];
                    //System.out.print(colSum[c] + " ");
                }
                //System.out.println();
                max = Math.max(max, find(colSum, k));
            }
        }
        return max;
    }
    
    private int find(int[] sum, int k){
        int result = Integer.MIN_VALUE;
        TreeSet<Integer> set = new TreeSet<>();
        set.add(0);
        int prefixSum = 0;
        for(int i=0; i<sum.length; i++){
            prefixSum += sum[i];
            Integer target = set.ceiling(prefixSum - k);
            if(target != null){
                result = Math.max(result, prefixSum - target);
            }
            set.add(prefixSum);
        }
        return result;
    }
}


//TC: O(R2 * clogc)
//SC: O(C)