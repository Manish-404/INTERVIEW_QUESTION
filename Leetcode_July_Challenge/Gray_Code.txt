Gray Code:-

An n-bit gray code sequence is a sequence of 2n integers where:

Every integer is in the inclusive range [0, 2n - 1],
The first integer is 0,
An integer appears no more than once in the sequence,
The binary representation of every pair of adjacent integers differs by exactly one bit, and
The binary representation of the first and last integers differs by exactly one bit.
Given an integer n, return any valid n-bit gray code sequence.

Example 1:

Input: n = 2
Output: [0,1,3,2]
Explanation:
The binary representation of [0,1,3,2] is [00,01,11,10].
- 00 and 01 differ by one bit
- 01 and 11 differ by one bit
- 11 and 10 differ by one bit
- 10 and 00 differ by one bit
[0,2,3,1] is also a valid gray code sequence, whose binary representation is [00,10,11,01].
- 00 and 10 differ by one bit
- 10 and 11 differ by one bit
- 11 and 01 differ by one bit
- 01 and 00 differ by one bit

Example 2:
Input: n = 1
Output: [0,1]
_____________________________________________________________________________________________________________________________________________________
// class Solution {
//     public List<Integer> grayCode(int n) {
//         List<Integer> list = new ArrayList<>();
//         list.add(0);
        
//         if(n == 0) return list;
//         list.add(1);
        
//         int curr = 1; 
//         for(int i=2; i<=n; i++){
//             curr *= 2;
//             for(int j=list.size()-1; j>=0; j--){
//                 list.add(curr+list.get(j));
//             }
//         }
//         return list;
//     }
// }

class Solution {
    public List<Integer> grayCode(int n) {
        List<Integer> list = new ArrayList<Integer>();
        for(int i=0; i < 1 << n; i++) //for i < (right shift 1 on n), then increment
            list.add(i ^ i >> 1); // i XOR i then right shift 1
        return list;
    }
}

//  XOR operations-             right shift 4 i.e 100 = 010 i.e(2)            
//  0 ^ 0 = 0                   right shift 5 i.e 101 = 010 i.e(2)
//  0 ^ 1 = 1                   right shift 6 i.e 110 = 011 i.e(3)
//  1 ^ 1 = 0                   right shift 7 i.e 111 = 011 i.e(3)
//  1 ^ 0 = 1                   right shift 8 i.e 1000 = 0100 i.e(4)
//                              right shift 9 i.e 1001 = 0100 i.e(4)
//                              right shift 10 i.e 1010 = 0101 i.e(5)
